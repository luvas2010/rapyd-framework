#summary DataEdit syntax
#labels Phase-Implementation

= Data Edit Syntax =


== sample ==

{{{

  $edit = new dataedit_library();
  $edit->label = 'Manage Article';
  $edit->back_url = $this->url('filtered_grid');
  
  $edit->source('articles');
  $edit->field('input','title','Title')->rule('trim','required');
  $edit->field('radiogroup','public','Public')->options(array("y"=>"Yes", "n"=>"No"));
  $edit->field('dropdown','author_id','Author')->options('SELECT author_id, firstname FROM authors')
	 ->rule('required');
  $edit->field('date','datefield','Date')->attributes(array('style'=>'width: 80px'));
  $edit->field('editor','body','Description')->rule('required');
  
  $edit->buttons('modify','save','undo','back');

  $edit->build();

  $data['head']	= $this->head();
  $data['content']= $edit->output;


}}}


== properties ==

|| *Property* || *Default Value* || *Options* || *Description* ||
|| label || '' || string || label to display for the filter ||
|| back_url || '' || string || url of page where to go back (when we click on back button)||

== methods ==
*$filter->source($source)*

|| *$source* || - || mixed || may be a "datamodel" object (or extended one), or the name of a db table (in this case dataedit will instance a new datamodel for us) ||

*$filter->field($type, $name, $label)*

|| *$type* || - || string || field type (input, password, checkboxgroup, checkbox, radiogroup, radio, dropdown, date, editor) ||
|| *$name* || - || string || field name, usually the db table field to append in the where clause ||
|| *$label* || - || string || label to display for the field ||

$filter->field($type, $name, $label)->*attributes($attributes)*

|| *$attributes* || - || assoc. array || array of extra attributes to build for column ||

$filter->field($type, $name, $label)->*options($options)*

|| *$options* || - || array || array of options (for field types like dropdown, radiogroup etc..) ||

*$filter->buttons($button1`[,$button2...]`)*

|| *$button* n || - || mixed || name of buttons to build ('modify','save','undo' and 'back' are the standard buttons available for datafilter) ||

*$filter->build()*

build filter, fill $filter->output 










*type* the type of input:
  * *input* normal text input
  * *password* password text input, displayed as asterisks
  * *checkboxgroup* a group of check boxes where multiple selections are possible
  * *checkbox* a single check box
  * *radiogroup* a group of radio buttons where only one selection is possible
  * *radio* a single radio button
  * *dropdown* a drop down list
  * *date* a pop-up date selector
  * *editor* an editor box

*name* the database field to use

*label* the label to display

*attributes* style attributes to change appearance

*rule* _required_ and any PHP command like _trim, serialize, ucword, etc._ Multiple rules must be concatenated by the pipe symbol: _required|trim_